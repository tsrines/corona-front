{"version":3,"sources":["components/CountryCell.js","containers/CountriesContainer.js","components/JohnsHopkinsCell.js","containers/JohnsHopkinsContainer.js","components/StateCell.js","containers/StatesContainer.js","containers/Main.js","App.js","serviceWorker.js","index.js"],"names":["CountryCell","props","Table","Row","Cell","Image","src","countryInfo","flag","alt","country","height","width","utc","updated","Date","toLocaleString","cases","todayCases","casesPerOneMillion","deaths","todayDeaths","deathsPerOneMillion","CountriesContainer","state","column","direction","countries","search","getCountries","fetch","then","resp","json","setState","displayCountries","filter","toLowerCase","includes","map","index","key","handleSearch","e","target","name","value","handleSort","clickedColumn","reverse","_","sortBy","this","Form","Input","placeholder","type","onChange","sortable","celled","singleLine","Header","HeaderCell","sorted","onClick","Body","React","Component","JohnsHopkinsCell","updatedAt","province","stats","confirmed","recovered","JohnsHopkinsContainer","getHopkins","console","log","displayJohnsHopkins","stat","Button","size","icon","color","StateCell","active","tests","testsPerOneMillion","StatesContainer","states","getStates","displayStates","Main","handleChange","toMap","Field","Radio","label","checked","App","hopkins","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gVA2BeA,MAjBf,SAAqBC,GAEnB,OACE,kBAACC,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAME,KAAP,KAAa,kBAACC,EAAA,EAAD,CAAOC,IAAKL,EAAMM,YAAYC,KAAMC,IAAKR,EAAMS,QAASC,OAAO,OAAOC,MAAM,UACzF,kBAACV,EAAA,EAAME,KAAP,MAXcS,EAWUZ,EAAMa,QAVrB,IAAIC,KAAKF,GAERG,mBASV,kBAACd,EAAA,EAAME,KAAP,KAAaH,EAAMS,SACnB,kBAACR,EAAA,EAAME,KAAP,KAAaH,EAAMgB,OACnB,kBAACf,EAAA,EAAME,KAAP,KAAaH,EAAMiB,YACnB,kBAAChB,EAAA,EAAME,KAAP,KAAaH,EAAMkB,oBACnB,kBAACjB,EAAA,EAAME,KAAP,KAAaH,EAAMmB,QACnB,kBAAClB,EAAA,EAAME,KAAP,KAAaH,EAAMoB,aACnB,kBAACnB,EAAA,EAAME,KAAP,KAAaH,EAAMqB,sBAlBzB,IAAoBT,G,iBC+HLU,E,4MA1HbC,MAAQ,CACNC,OAAQ,KACRC,UAAW,KACXC,UAAW,GACXC,OAAQ,I,EAIVC,aAAe,WACbC,MAAM,0CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAJ,GAAS,OAAI,EAAKO,SAAS,CAAEP,kB,EAMvCQ,iBAAmB,WAKjB,OAJgB,EAAKX,MAAMG,UAAUS,QAAO,SAAA1B,GAAO,OAAIA,EAAQA,QAAQ2B,cAAcC,SAAS,EAAKd,MAAMI,OAAOS,kBAC/EE,KAAI,SAAC7B,EAAS8B,GAAV,OAAoB,kBAAC,EAAD,eAAaC,IAAKD,GAAW9B,Q,EAMxFgC,aAAe,SAACC,GACd,EAAKT,SAAL,eACGS,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,S,EAI9BC,WAAa,SAACC,GAAD,OAAmB,WAAO,IAAD,EACK,EAAKxB,MAAtCC,EAD4B,EAC5BA,OAAQE,EADoB,EACpBA,UAAWD,EADS,EACTA,UAEvBD,IAAWuB,EAUf,EAAKd,SAAS,CACZP,UAAWA,EAAUsB,UACrBvB,UAAyB,cAAdA,EAA4B,aAAe,cAXtD,EAAKQ,SAAS,CACZT,OAAQuB,EACRrB,UAAWuB,IAAEC,OAAOxB,EAAW,CAACqB,IAChCtB,UAAW,gB,kEAxBf0B,KAAKvB,iB,+BAqCG,IAAD,SAC+BuB,KAAK5B,MAAnCC,EADD,EACCA,OAAQC,EADT,EACSA,UAAWE,EADpB,EACoBA,OAC3B,OACE,6BAEE,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,YAAY,YAAYC,KAAK,OAAOX,KAAK,SAASC,MAAOlB,EAAQ6B,SAAU,SAACd,GAAD,OAAO,EAAKD,aAAaC,OAE7G,kBAACzC,EAAA,EAAD,CAAOwD,UAAQ,EAACC,QAAM,EAACC,YAAU,GAC/B,kBAAC1D,EAAA,EAAM2D,OAAP,KACE,kBAAC3D,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAM4D,WAAP,MACA,kBAAC5D,EAAA,EAAM4D,WAAP,CACEC,OAAmB,YAAXtC,EAAuBC,EAAY,KAC3CsC,QAASZ,KAAKL,WAAW,YAF3B,gBAMA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,YAAXtC,EAAuBC,EAAY,KAC3CsC,QAASZ,KAAKL,WAAW,YAF3B,WAMA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,UAAXtC,EAAqBC,EAAY,KACzCsC,QAASZ,KAAKL,WAAW,UAF3B,SAMA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,eAAXtC,EAA0BC,EAAY,KAC9CsC,QAASZ,KAAKL,WAAW,eAF3B,eAMA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,uBAAXtC,EAAkCC,EAAY,KACtDsC,QAASZ,KAAKL,WAAW,uBAF3B,uBAMA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,WAAXtC,EAAsBC,EAAY,KAC1CsC,QAASZ,KAAKL,WAAW,WAF3B,UAKA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,gBAAXtC,EAA2BC,EAAY,KAC/CsC,QAASZ,KAAKL,WAAW,gBAF3B,gBAMA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,wBAAXtC,EAAmCC,EAAY,KACvDsC,QAASZ,KAAKL,WAAW,wBAF3B,0BAQJ,kBAAC7C,EAAA,EAAM+D,KAAP,KACGb,KAAKjB,0B,GAnHe+B,IAAMC,WCkBxBC,MAff,SAA0BnE,GAExB,OACE,kBAACC,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAME,KAAP,MAVcS,EAUUZ,EAAMoE,UATrB,IAAItD,KAAKF,GAERG,mBAQV,kBAACd,EAAA,EAAME,KAAP,KAAaH,EAAMS,SACnB,kBAACR,EAAA,EAAME,KAAP,KAAaH,EAAMqE,UACnB,kBAACpE,EAAA,EAAME,KAAP,KAAaH,EAAMsE,MAAMC,WACzB,kBAACtE,EAAA,EAAME,KAAP,KAAaH,EAAMsE,MAAMnD,QACzB,kBAAClB,EAAA,EAAME,KAAP,KAAaH,EAAMsE,MAAME,YAf/B,IAAoB5D,G,SC0DL6D,E,4MAxDblD,MAAQ,CACNP,MAAO,GACPW,OAAQ,I,EAGV+C,WAAa,WACX7C,MAAM,wCACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAd,GAAK,OAAI,EAAKiB,SAAS,CAAEjB,UAAS,kBAAM2D,QAAQC,IAAI5D,U,EAM9D6D,oBAAsB,WAapB,OAJ0B,EAAKtD,MAAMP,MAAMsB,KAAI,SAACwC,EAAMvC,GAEpD,OAAO,kBAAC,EAAD,eAAiBC,IAAKD,GAAWuC,Q,kEAd1C3B,KAAKuB,e,+BAqBL,OADAC,QAAQC,IAAI,oDAAqDzB,KAAK5B,OAEpE,kBAACtB,EAAA,EAAD,CAAO0D,YAAU,GACf,kBAAC1D,EAAA,EAAM2D,OAAP,KACE,kBAAC3D,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAM4D,WAAP,gBACA,kBAAC5D,EAAA,EAAM4D,WAAP,gBACA,kBAAC5D,EAAA,EAAM4D,WAAP,iBAA4B,kBAACkB,EAAA,EAAD,CAAQC,KAAK,OAAOC,KAAK,iCACrD,kBAAChF,EAAA,EAAM4D,WAAP,uBAAkC,kBAACkB,EAAA,EAAD,CAEhCG,MAAO,UACPD,KAAK,mBAEP,kBAAChF,EAAA,EAAM4D,WAAP,yBACA,kBAAC5D,EAAA,EAAM4D,WAAP,oBAGJ,kBAAC5D,EAAA,EAAM+D,KAAP,KACGb,KAAK0B,4B,GAnDoBZ,IAAMC,WCqB3BiB,MAff,SAAmBnF,GAEjB,OACE,kBAACC,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAME,KAAP,KAAaH,EAAMuB,OACnB,kBAACtB,EAAA,EAAME,KAAP,KAAaH,EAAMgB,OACnB,kBAACf,EAAA,EAAME,KAAP,KAAaH,EAAMiB,YACnB,kBAAChB,EAAA,EAAME,KAAP,KAAaH,EAAMoF,QACnB,kBAACnF,EAAA,EAAME,KAAP,KAAaH,EAAMmB,QACnB,kBAAClB,EAAA,EAAME,KAAP,KAAaH,EAAMqF,OACnB,kBAACpF,EAAA,EAAME,KAAP,KAAaH,EAAMsF,sBC8GVC,E,4MA1HbhE,MAAQ,CACNiE,OAAQ,GACR7D,OAAQ,GACRH,OAAQ,KACRC,UAAW,M,EAGbgE,UAAY,WACV5D,MAAM,uCACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAA0D,GAAM,OAAI,EAAKvD,SAAS,CAAEuD,e,EAMpCE,cAAgB,WASd,OARa,EAAKnE,MAAMiE,OAAOrD,QAAO,SAAAZ,GAAK,OAAIA,EAAMA,MAAMa,cAAcC,SAAS,EAAKd,MAAMI,OAAOS,kBAEzEE,KAAI,SAACf,EAAOgB,GAErC,OAAO,kBAAC,EAAD,eAAWC,IAAKD,GAAWhB,Q,EAOtCkB,aAAe,SAACC,GACd,EAAKT,SAAL,eACGS,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,S,EAI9BC,WAAa,SAACC,GAAD,OAAmB,WAAO,IAAD,EACE,EAAKxB,MAAnCC,EAD4B,EAC5BA,OAAQgE,EADoB,EACpBA,OAAQ/D,EADY,EACZA,UAEpBD,IAAWuB,EAUf,EAAKd,SAAS,CACZuD,OAAQA,EAAOxC,UACfvB,UAAyB,cAAdA,EAA4B,aAAe,cAXtD,EAAKQ,SAAS,CACZT,OAAQuB,EACRyC,OAAQvC,IAAEC,OAAOsC,EAAQ,CAACzC,IAC1BtB,UAAW,gB,kEA5Bf0B,KAAKsC,c,+BAyCG,IAAD,SAC+BtC,KAAK5B,MAAnCC,EADD,EACCA,OAAQC,EADT,EACSA,UAAWE,EADpB,EACoBA,OAE3B,OACE,6BACE,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,YAAY,YAAYC,KAAK,OAAOX,KAAK,SAASC,MAAOlB,EAAQ6B,SAAU,SAACd,GAAD,OAAO,EAAKD,aAAaC,OAG7G,kBAACzC,EAAA,EAAD,CAAOwD,UAAQ,EAACC,QAAM,EAACC,YAAU,GAC/B,kBAAC1D,EAAA,EAAM2D,OAAP,KACE,kBAAC3D,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAM4D,WAAP,CACEC,OAAmB,UAAXtC,EAAqBC,EAAY,KACzCsC,QAASZ,KAAKL,WAAW,UAF3B,SAMA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,UAAXtC,EAAqBC,EAAY,KACzCsC,QAASZ,KAAKL,WAAW,UAF3B,SAOA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,eAAXtC,EAA0BC,EAAY,KAC9CsC,QAASZ,KAAKL,WAAW,eAF3B,eAOA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,WAAXtC,EAAsBC,EAAY,KAC1CsC,QAASZ,KAAKL,WAAW,WAF3B,gBAOA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,WAAXtC,EAAsBC,EAAY,KAC1CsC,QAASZ,KAAKL,WAAW,WAF3B,UAMA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,UAAXtC,EAAqBC,EAAY,KACzCsC,QAASZ,KAAKL,WAAW,UAF3B,SAMA,kBAAC7C,EAAA,EAAM4D,WAAP,CACEC,OAAmB,uBAAXtC,EAAkCC,EAAY,KACtDsC,QAASZ,KAAKL,WAAW,uBAF3B,2BAQJ,kBAAC7C,EAAA,EAAM+D,KAAP,KACGb,KAAKuC,uB,GApHYzB,IAAMC,W,SCsDrByB,E,4MAjDbpE,MAAQ,G,EACRqE,aAAe,SAAClD,EAAD,OAAMG,EAAN,EAAMA,MAAN,OAAkB,EAAKZ,SAAS,CAAEY,W,EACjDgD,MAAQ,kBAAM,EAAK5D,SAAS,CAACY,MAAO,Q,uDAGlC,OACE,kBAAC,WAAD,KACE,kBAACO,EAAA,EAAD,KAIA,kBAACA,EAAA,EAAK0C,MAAN,KACE,kBAACC,EAAA,EAAD,CACEC,MAAM,YACNpD,KAAK,aACLC,MAAM,YACNoD,QAA8B,cAArB9C,KAAK5B,MAAMsB,MACpBW,SAAUL,KAAKyC,gBAGnB,kBAACxC,EAAA,EAAK0C,MAAN,KACE,kBAACC,EAAA,EAAD,CACEC,MAAM,SACNpD,KAAK,aACLC,MAAM,SACNoD,QAA8B,WAArB9C,KAAK5B,MAAMsB,MACpBW,SAAUL,KAAKyC,gBAGnB,kBAACxC,EAAA,EAAK0C,MAAN,KACE,kBAACC,EAAA,EAAD,CACEC,MAAM,qBACNpD,KAAK,aACLC,MAAM,QACNoD,QAA8B,UAArB9C,KAAK5B,MAAMsB,MACpBW,SAAUL,KAAKyC,iBAMG,cAArBzC,KAAK5B,MAAMsB,OAAyB,kBAAC,EAAD,MACf,WAArBM,KAAK5B,MAAMsB,OAAsB,kBAAC,EAAD,MACZ,UAArBM,KAAK5B,MAAMsB,OAAqB,kBAAC,EAAD,W,GA7CtBoB,IAAMC,WCWVgC,G,mNAfb3E,MAAQ,CACNG,UAAW,GACX8D,OAAQ,GACRW,QAAS,I,uDAIT,OACE,yBAAKC,UAAU,OACb,qDACA,kBAAC,EAAD,W,GAXUnC,IAAMC,YCQJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlF,MAAK,SAAAmF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.f40b910d.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Table, Image } from 'semantic-ui-react'\n\nfunction lastUpdate(utc){\n  let jsTime = new Date(utc)\n\n  return jsTime.toLocaleString() \n}\n\nfunction CountryCell(props) {\n\n  return (\n    <Table.Row>\n      <Table.Cell>{<Image src={props.countryInfo.flag} alt={props.country} height=\"20px\" width=\"30px\"/>}</Table.Cell>\n      <Table.Cell>{lastUpdate(props.updated)}</Table.Cell>\n      <Table.Cell>{props.country}</Table.Cell>\n      <Table.Cell>{props.cases}</Table.Cell>\n      <Table.Cell>{props.todayCases}</Table.Cell>\n      <Table.Cell>{props.casesPerOneMillion}</Table.Cell>\n      <Table.Cell>{props.deaths}</Table.Cell>\n      <Table.Cell>{props.todayDeaths}</Table.Cell>\n      <Table.Cell>{props.deathsPerOneMillion}</Table.Cell>\n    </Table.Row>\n  )\n}\n\nexport default CountryCell","import React from 'react'\nimport { Table, Form, Input } from 'semantic-ui-react'\nimport CountryCell from '../components/CountryCell'\nimport _ from 'lodash'\n\n\n\nclass CountriesContainer extends React.Component {\n\n  state = {\n    column: null,\n    direction: null,\n    countries: [],\n    search: \"\"\n\n  }\n\n  getCountries = () => {\n    fetch(`https://corona.lmao.ninja/v2/countries`)\n      .then(resp => resp.json())\n      .then(countries => this.setState({ countries }))\n  }\n  componentDidMount() {\n    this.getCountries()\n  }\n\n  displayCountries = () => {\n    let countries = this.state.countries.filter(country => country.country.toLowerCase().includes(this.state.search.toLowerCase()))\n    let displayCountries = countries.map((country, index) => <CountryCell key={index} {...country} />)\n\n\n    return displayCountries\n  }\n\n  handleSearch = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleSort = (clickedColumn) => () => {\n    const { column, countries, direction } = this.state\n\n    if (column !== clickedColumn) {\n      this.setState({\n        column: clickedColumn,\n        countries: _.sortBy(countries, [clickedColumn]),\n        direction: 'ascending',\n      })\n\n      return\n    }\n\n    this.setState({\n      countries: countries.reverse(),\n      direction: direction === 'ascending' ? 'descending' : 'ascending',\n    })\n  }\n\n\n  render() {\n    const { column, direction, search } = this.state\n    return (\n      <div>\n        {/* <MapContainer /> */}\n        <Form>\n          <Input placeholder='Search...' type='text' name=\"search\" value={search} onChange={(e) => this.handleSearch(e)}></Input>\n        </Form>\n        <Table sortable celled singleLine>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell></Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'updated' ? direction : null}\n                onClick={this.handleSort('updated')}\n              >\n                Last Updated\n                </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'country' ? direction : null}\n                onClick={this.handleSort('country')}\n              >\n                Country\n                </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'cases' ? direction : null}\n                onClick={this.handleSort('cases')}\n              >\n                Cases\n                </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'todayCases' ? direction : null}\n                onClick={this.handleSort('todayCases')}\n              >\n                Cases Today\n                </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'casesPerOneMillion' ? direction : null}\n                onClick={this.handleSort('casesPerOneMillion')}\n              >\n                Cases Per 1 Million\n                </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'deaths' ? direction : null}\n                onClick={this.handleSort('deaths')}\n              >\n                Deaths</Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'todayDeaths' ? direction : null}\n                onClick={this.handleSort('todayDeaths')}\n              >\n                Deaths Today\n                </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'deathsPerOneMillion' ? direction : null}\n                onClick={this.handleSort('deathsPerOneMillion')}\n              >\n                Deaths Per 1 Million\n                </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {this.displayCountries()}\n          </Table.Body>\n        </Table>\n\n      </div>\n    )\n  }\n}\n\nexport default CountriesContainer\n\n","import React from 'react'\n\nimport { Table } from 'semantic-ui-react'\n\nfunction lastUpdate(utc){\n  let jsTime = new Date(utc)\n\n  return jsTime.toLocaleString() \n}\n\nfunction JohnsHopkinsCell(props) {\n\n  return (\n    <Table.Row>\n      <Table.Cell>{lastUpdate(props.updatedAt)}</Table.Cell>\n      <Table.Cell>{props.country}</Table.Cell>\n      <Table.Cell>{props.province}</Table.Cell>\n      <Table.Cell>{props.stats.confirmed}</Table.Cell>\n      <Table.Cell>{props.stats.deaths}</Table.Cell>\n      <Table.Cell>{props.stats.recovered}</Table.Cell>\n      \n    </Table.Row>\n  )\n}\n\nexport default JohnsHopkinsCell","import React from 'react'\nimport JohnHopkinsCell from '../components/JohnsHopkinsCell'\nimport { Button, Table } from 'semantic-ui-react'\n\nclass JohnsHopkinsContainer extends React.Component {\n\n  state = {\n    cases: [],\n    search: \"\"\n  }\n\n  getHopkins = () => {\n    fetch(`https://corona.lmao.ninja/v2/jhucsse`)\n      .then(resp => resp.json())\n      .then(cases => this.setState({ cases }, () => console.log(cases)))\n  }\n  componentDidMount() {\n    this.getHopkins()\n  }\n\n  displayJohnsHopkins = () => {\n    // let cases = this.state.cases.filter(stat => {\n    //   try {\n    //     stat.province.toLowerCase().includes(this.state.search.toLowerCase())\n    //   } catch (error) {\n    //     console.log(error.message)\n    //   }\n    // })\n\n    let displayJohnsHopkins = this.state.cases.map((stat, index) => {\n\n      return <JohnHopkinsCell key={index} {...stat} />\n    })\n    return displayJohnsHopkins\n  }\n\n  render() {\n    console.log(\"JohnsHopkinsContainer Render Method, this.state: \", this.state)\n    return (\n      <Table singleLine>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Updated</Table.HeaderCell>\n            <Table.HeaderCell>Country</Table.HeaderCell>\n            <Table.HeaderCell>Province {<Button size='mini' icon='arrow alternate circle down' />}</Table.HeaderCell>\n            <Table.HeaderCell>Confirmed Cases{<Button\n              // onClick={() => this.addFavorite(this.vehicle)}\n              color={'twitter'}\n              icon='heart outline'\n            />}</Table.HeaderCell>\n            <Table.HeaderCell>Confirmed Deaths</Table.HeaderCell>\n            <Table.HeaderCell>Recovered</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {this.displayJohnsHopkins()}\n        </Table.Body>\n      </Table>\n    )\n  }\n}\n\nexport default JohnsHopkinsContainer","import React from 'react'\n\nimport { Table} from 'semantic-ui-react'\n\n// function lastUpdate(utc){\n//   let jsTime = new Date(utc)\n\n//   return jsTime.toLocaleString() \n// }\n\nfunction StateCell(props) {\n\n  return (\n    <Table.Row>\n      <Table.Cell>{props.state}</Table.Cell>\n      <Table.Cell>{props.cases}</Table.Cell>\n      <Table.Cell>{props.todayCases}</Table.Cell>\n      <Table.Cell>{props.active}</Table.Cell>\n      <Table.Cell>{props.deaths}</Table.Cell>\n      <Table.Cell>{props.tests}</Table.Cell>\n      <Table.Cell>{props.testsPerOneMillion}</Table.Cell>\n    </Table.Row>\n  )\n}\n\nexport default StateCell","import React from 'react'\nimport StateCell from '../components/StateCell'\nimport { Table, Form, Input } from 'semantic-ui-react'\nimport _ from 'lodash'\n\n\nclass StatesContainer extends React.Component {\n\n  state = {\n    states: [],\n    search: \"\",\n    column: null,\n    direction: null,\n  }\n\n  getStates = () => {\n    fetch(`https://corona.lmao.ninja/v2/states`)\n      .then(resp => resp.json())\n      .then(states => this.setState({ states }))\n  }\n  componentDidMount() {\n    this.getStates()\n  }\n\n  displayStates = () => {\n    let states = this.state.states.filter(state => state.state.toLowerCase().includes(this.state.search.toLowerCase()))\n\n    let displayStates = states.map((state, index) => {\n\n      return <StateCell key={index} {...state} />\n    })\n\n\n    return displayStates\n  }\n\n  handleSearch = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleSort = (clickedColumn) => () => {\n    const { column, states, direction } = this.state\n\n    if (column !== clickedColumn) {\n      this.setState({\n        column: clickedColumn,\n        states: _.sortBy(states, [clickedColumn]),\n        direction: 'ascending',\n      })\n\n      return\n    }\n\n    this.setState({\n      states: states.reverse(),\n      direction: direction === 'ascending' ? 'descending' : 'ascending',\n    })\n  }\n\n\n  render() {\n    const { column, direction, search } = this.state\n\n    return (\n      <div>\n        <Form>\n          <Input placeholder='Search...' type='text' name=\"search\" value={search} onChange={(e) => this.handleSearch(e)}></Input>\n        </Form>\n\n        <Table sortable celled singleLine>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell\n                sorted={column === 'state' ? direction : null}\n                onClick={this.handleSort('state')}\n              >\n                State\n            </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'cases' ? direction : null}\n                onClick={this.handleSort('cases')}\n\n              >\n                Cases\n            </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'todayCases' ? direction : null}\n                onClick={this.handleSort('todayCases')}\n\n              >\n                Cases Today\n           </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'active' ? direction : null}\n                onClick={this.handleSort('active')}\n\n              >\n                Active Cases\n            </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'deaths' ? direction : null}\n                onClick={this.handleSort('deaths')}\n              >\n                Deaths\n          </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'tests' ? direction : null}\n                onClick={this.handleSort('tests')}\n              >\n                Tests\n          </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === 'testsPerOneMillion' ? direction : null}\n                onClick={this.handleSort('testsPerOneMillion')}\n              >\n                Tests Per One Million\n          </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {this.displayStates()}\n          </Table.Body>\n        </Table>\n      </div>\n    )\n  }\n}\n\nexport default StatesContainer","import React from 'react'\nimport { Fragment } from 'react'\nimport CountriesContainer from './CountriesContainer'\nimport JohnsHopkinsContainer from './JohnsHopkinsContainer'\nimport StatesContainer from './StatesContainer'\nimport {Form, Radio} from 'semantic-ui-react'\n// import MapContainer from './MapContainer'\n\n\nclass Main extends React.Component {\n\n  state = {}\n  handleChange = (e, { value }) => this.setState({ value })\n  toMap = () => this.setState({value: null})\n  render() {\n\n    return (\n      <Fragment>\n        <Form>\n        {/* <Form.Field>\n          Selected value: <b>{this.state.value}</b>\n        </Form.Field> */}\n        <Form.Field>\n          <Radio\n            label='Countries'\n            name='radioGroup'\n            value='countries'\n            checked={this.state.value === 'countries'}\n            onChange={this.handleChange}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Radio\n            label='States'\n            name='radioGroup'\n            value='states'\n            checked={this.state.value === 'states'}\n            onChange={this.handleChange}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Radio\n            label='Johns Hopkins Data'\n            name='radioGroup'\n            value='cases'\n            checked={this.state.value === 'cases'}\n            onChange={this.handleChange}  \n          />\n        </Form.Field>\n      </Form>\n        {/* {this.state.value && <Button  onClick={this.toMap}>Back to Map</Button>} */}\n        {/* {!this.state.value && <MapContainer /> } */}\n        {this.state.value === 'countries' && <CountriesContainer />}\n        {this.state.value === 'states' && <StatesContainer />}\n        {this.state.value === 'cases' && <JohnsHopkinsContainer />}\n      </Fragment>\n    )\n  }\n}\n\nexport default Main ","import React from 'react';\nimport Main  from './containers/Main.js'\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    countries: [],\n    states: [],\n    hopkins: []\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Corona Daily Check-In</h1>\n        <Main />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}